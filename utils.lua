local Utils = {}

--- –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π.
--- @param name string --[[ –ò–º—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ (—Å–∏–≥–Ω–∞–ª–∞, –∂–∏–¥–∫–æ—Å—Ç–∏, –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞). ]]
--- @param expected_type? string --[[ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "recipe", —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç—ã. ]]
--- @return "recipe"|"virtual"|"fluid"|"item"|nil --[[ –¢–∏–ø –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –∏–ª–∏ nil, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ]]
function Utils.get_type(name, expected_type)
  if expected_type == "recipe" then
    if prototypes.recipe[name] then
      return "recipe"
    end
  end

  if prototypes.virtual_signal[name] then
    return "virtual"
  end

  if prototypes.fluid[name] then
    return "fluid"
  end

  if prototypes.item[name] then
    return "item"
  end

  game.print("–í–Ω–∏–º–∞–Ω–∏–µ, –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: " .. tostring(name))
  return nil
end

--- –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ —Ü–µ–ª–µ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
-- @param storage table ‚Äî —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∏–¥–∞ [name][quality][type] = min
-- @param norm {name=string, quality=string, type=string, min=number}
function Utils.add_signal_to_storage(storage, norm)
  local n, q, t, m = norm.name, norm.quality, norm.type, norm.min
  storage[n]       = storage[n] or {}
  storage[n][q]    = storage[n][q] or {}
  storage[n][q][t] = (storage[n][q][t] or 0) + m
end


--- –ò—â–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ area —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –º–µ—Ç–∫–∏.
--- @param label string --[[ –ú–µ—Ç–∫–∞: –∏—â–µ—Ç—Å—è –≤ combinator_description –∏ group —Å–µ–∫—Ü–∏–π ]]
function Utils.findSpecialEntity(label, search_area)
  local surface = game.player.surface
  search_params = {}
  search_params.area = search_area

  local entities = surface.find_entities_filtered(search_params)
  label = string.lower(label)

  for _, entity in ipairs(entities) do
    -- üìå 1. combinator_description (–µ—Å–ª–∏ –µ—Å—Ç—å)
    local success, desc = pcall(function()
      return entity.combinator_description
    end)
    if success and desc and string.lower(desc):find(label, 1, true) then
      return entity
    end

    -- üìå 2. get_logistic_sections —Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–µ–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π group
    if entity.get_logistic_sections then
      local sections = entity.get_logistic_sections()
      if sections and sections.sections then
        for _, section in pairs(sections.sections) do
          if not section.active and section.group and type(section.group) == "string" then
            if string.lower(section.group) == label then
              return entity
            end
          end
        end
      end
    end
  end

  return nil
end

-- –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ (items/fluids) –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
-- –≤—ã—á–∏—Å–ª—è–µ—Ç ¬´–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ¬ª (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ–º–æ–µ –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ –∫—Ä–∞—Ñ—Ç–∞):
--   1) exclusively_ingredients: –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–Ω–∏ —Ä–∞–∑—É –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–º);
--   2) ingredients_and_products: –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ –∫–∞–∫ –ø—Ä–æ–¥—É–∫—Ç;
--   3) exclusively_products: –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∏ —Ä–∞–∑—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç).
-- –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã ¬´exclusively_products¬ª –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è¬ª –±—É–¥–µ—Ç 0, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç—Å—è.
--
-- @param recipes table –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
--                     {
--                       ["iron-plate"]    = <–ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ iron-plate LuaPrototype>,
--                       ["copper-cable"]  = <–ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ copper-cable LuaPrototype>,
--                       ‚Ä¶
--                     }
--                     –ì–¥–µ –∫–∞–∂–¥—ã–π <–ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞> ‚Äî —ç—Ç–æ LuaPrototype —Å –ø–æ–ª–µ–º .ingredients
--                     (—Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü { name=string, type="item"/"fluid", amount=number }) –∏
--                     –ø–æ–ª–µ–º .products / .results / .result.
-- @return table –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—è–º–∏:
--               exclusively_ingredients   = { [–∏–º—è_–æ–±—ä–µ–∫—Ç–∞] = <–º–∞–∫—Å. –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ>, ‚Ä¶ },
--               ingredients_and_products  = { [–∏–º—è_–æ–±—ä–µ–∫—Ç–∞] = <–º–∞–∫—Å. –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ>, ‚Ä¶ },
--               exclusively_products      = { [–∏–º—è_–æ–±—ä–µ–∫—Ç–∞] = 0, ‚Ä¶ }
function Utils.get_classify_ingredients(recipes)
  -- –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ –ø–æ–¥—Ç–∞–±–ª–∏—Ü—ã
  local ingredient_groups  = {
    exclusively_ingredients  = {}, -- –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ ingredients
    ingredients_and_products = {}, -- –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏ —Ç–∞–º, –∏ —Ç–∞–º
    exclusively_products     = {}, -- –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ products
  }

  -- –®–∞–≥ 0: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  -- max_consumption[name] = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç—Ä–µ–±—É–µ–º–æ–µ –≤ –æ–¥–Ω–æ–º —Ä–µ–º–µ—Å–ª–µ (–∏–∑ –ø–æ–ª—è .ingredients)
  local max_consumption    = {}

  -- seen_as_ingredient[name] = true, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ ingredients
  local seen_as_ingredient = {}
  -- seen_as_product[name] = true, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ products
  local seen_as_product    = {}

  -- –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
  for _, recipe_proto in pairs(recipes) do
    -- 1.1 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ingredients
    if recipe_proto.ingredients then
      for _, ing in ipairs(recipe_proto.ingredients) do
        local obj_name = ing.name
        local obj_type = ing.type -- –º–æ–∂–µ—Ç –±—ã—Ç—å "item" –∏–ª–∏ "fluid"
        local amount = ing.amount or 0
        -- –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        if not max_consumption[obj_name] or amount > max_consumption[obj_name] then
          max_consumption[obj_name] = amount
        end
        -- –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        seen_as_ingredient[obj_name] = true
      end
    end

    -- 1.2 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º products / results / result
    if recipe_proto.products then
      for _, prod in ipairs(recipe_proto.products) do
        local obj_name = prod.name
        seen_as_product[obj_name] = true
        -- –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ max_consumption,
        -- —Ç.–∫. —ç—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
        -- –ù–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º,
        -- –µ–≥–æ max_consumption —É–∂–µ —É—á—Ç—ë–Ω –≤—ã—à–µ.
      end
    elseif recipe_proto.results then
      for _, prod in ipairs(recipe_proto.results) do
        local obj_name = prod.name
        seen_as_product[obj_name] = true
      end
    elseif recipe_proto.result then
      local obj_name = recipe_proto.result
      seen_as_product[obj_name] = true
    end
  end

  -- –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  -- 2.1 –¢–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –≤ ingredients
  for name, _ in pairs(seen_as_ingredient) do
    if seen_as_product[name] then
      -- –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –∏ —Ç–∞–º, –∏ —Ç–∞–º
      ingredient_groups.ingredients_and_products[name] = max_consumption[name] or 0
      -- –£–±–∏—Ä–∞–µ–º –∏–∑ seen_as_product, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ exclusively_products
      seen_as_product[name] = nil
    else
      -- –¢–æ–ª—å–∫–æ –∫–∞–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
      ingredient_groups.exclusively_ingredients[name] = max_consumption[name] or 0
    end
  end

  -- 2.2 –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ seen_as_product ‚Äî —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –≤ ingredients
  for name, _ in pairs(seen_as_product) do
    -- –î–ª—è –Ω–∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ = 0
    ingredient_groups.exclusively_products[name] = 0
  end

  return ingredient_groups
end

--- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞ –¥–ª—è item/fluid, —Å —É—á—ë—Ç–æ–º —Ñ–æ–ª–±—ç–∫–∞.
--- @param name string –ò–º—è —Ä–µ—Å—É—Ä—Å–∞
--- @param fluid_default number? –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏
--- @param zero_fallback number? –ó–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ stack_size == 0
--- @return number stack_size –†–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞ –∏–ª–∏ zero_fallback
function Utils.get_stack_size(name, fluid_default, zero_fallback)
  local stack_size = 0

  if prototypes.item[name] then
    stack_size = prototypes.item[name].stack_size
  elseif prototypes.fluid[name] then
    stack_size = fluid_default or 1000
  else
    game.print("–°–∏–≥–Ω–∞–ª –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—Ç–∞–∫–∞: " .. tostring(name))
  end

  if stack_size == 0 and zero_fallback then
    return zero_fallback
  end

  return stack_size
end

--- –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö item-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞.
--- @param recipe LuaRecipePrototype ‚Äî —Ä–µ—Ü–µ–ø—Ç
--- @param multiplier number? ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
--- @param add number? ‚Äî —Å–ª–∞–≥–∞–µ–º–æ–µ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º–æ–µ –∫ –∫–∞–∂–¥–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
--- @return integer ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (fluid –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
function Utils.calculate_ingredient_slot_usage(recipe, multiplier, add)
  multiplier = multiplier or 1
  add = add or 0

  if not recipe or not recipe.ingredients then
    return 0
  end

  local slot_count = 0
  for _, ing in ipairs(recipe.ingredients) do
    if ing.type == "item" then
      local amount = (ing.amount or 0) * multiplier + add
      local stack_size = Utils.get_stack_size(ing.name)
      slot_count = slot_count + math.ceil(amount / stack_size)
    end
  end

  return slot_count
end

return Utils
